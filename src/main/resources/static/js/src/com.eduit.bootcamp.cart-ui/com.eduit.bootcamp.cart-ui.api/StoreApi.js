/**
 * Eduit REST shopping cart API - OpenAPI 3.0
 * Aplicacion Carrito de compras Bootcamp EducacionIt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: federicovittorini@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CartDTO from '../com.eduit.bootcamp.cart-ui.model/CartDTO';
import ProductCartDTO from '../com.eduit.bootcamp.cart-ui.model/ProductCartDTO';
import ResponseContainerResponseDTO from '../com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO';

/**
* Store service.
* @module com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi
* @version 1.0.0
*/
export default class StoreApi {

    /**
    * Constructs a new StoreApi. 
    * @alias module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi
    * @class
    * @param {module:com.eduit.bootcamp.cart-ui/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.eduit.bootcamp.cart-ui/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addToCart operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~addToCartCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a product to the cart
     * Add a product to the cart, authentication required.
     * @param {String} cartId the cartId
     * @param {Object} opts Optional parameters
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ProductCartDTO} opts.productCartDTO The product to be added.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~addToCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    addToCart(cartId, opts, callback) {
      opts = opts || {};
      let postBody = opts['productCartDTO'];
      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling addToCart");
      }

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/carts/cart/{cartId}/items', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buyCart operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~buyCartCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buy cart
     * Buy a cart, authentication required.
     * @param {String} cartId the cartId
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~buyCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    buyCart(cartId, callback) {
      let postBody = null;
      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling buyCart");
      }

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/carts/cart/{cartId}/buy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCart operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~createCartCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create cart
     * Create a cart, authentication required.
     * @param {Object} opts Optional parameters
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/CartDTO} opts.cartDTO Created cart object
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~createCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    createCart(opts, callback) {
      opts = opts || {};
      let postBody = opts['cartDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/carts/cart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCart operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~deleteCartCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete cart
     * Delete a cart, authentication required.
     * @param {String} cartId the cartId
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~deleteCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    deleteCart(cartId, callback) {
      let postBody = null;
      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling deleteCart");
      }

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/carts/cart/{cartId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFromCart operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~deleteFromCartCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete products from cart
     * Delete products from cart, authentication required.
     * @param {String} cartId the cartId
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~deleteFromCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    deleteFromCart(cartId, callback) {
      let postBody = null;
      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling deleteFromCart");
      }

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/carts/cart/{cartId}/items', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveCart operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~retrieveCartCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve cart
     * Retrieve a cart, authentication required.
     * @param {String} cartId the cartId
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~retrieveCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    retrieveCart(cartId, callback) {
      let postBody = null;
      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling retrieveCart");
      }

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/carts/cart/{cartId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveProductsInCart operation.
     * @callback module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~retrieveProductsInCartCallback
     * @param {String} error Error message, if any.
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve products in cart
     * Retrieve products in cart, authentication required.
     * @param {String} cartId the cartId
     * @param {module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.api/StoreApi~retrieveProductsInCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.eduit.bootcamp.cart-ui/com.eduit.bootcamp.cart-ui.model/ResponseContainerResponseDTO}
     */
    retrieveProductsInCart(cartId, callback) {
      let postBody = null;
      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling retrieveProductsInCart");
      }

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseContainerResponseDTO;
      return this.apiClient.callApi(
        '/carts/cart/{cartId}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
